// This file defines the grammar of an expression.

// RegEx Tokens START
{
    tokens=[
        WHITE_SPACE='regexp:\s'
        DIGIT='regexp:[0-9]'
        LETTER='regexp:[A-z]'
    ]
}
// RegEx Tokens END



EXPRESSION ::= WHITE_SPACE* SUM WHITE_SPACE*

private IDENTIFIER ::= (LETTER | "_") (LETTER | "_" | DIGIT)*

private SUM ::= PRODUCT SUM_PART*
private SUM_PART ::= WHITE_SPACE* ("+" | "-") WHITE_SPACE* PRODUCT
private PRODUCT ::= VALUE PRODUCT_PART*
private PRODUCT_PART ::= WHITE_SPACE* ("*" | "/") WHITE_SPACE* VALUE
private VALUE ::= "-"? WHITE_SPACE* (GROUPED | NUMBER | FUNCTION_CALL | VARIABLE_CALL)

private GROUPED ::= "(" EXPRESSION ")"
private VARIABLE_CALL ::= IDENTIFIER

private NUMBER ::= DIGIT+ NUMBER_FLOATING_PART? NUMBER_E_PART?
private NUMBER_FLOATING_PART ::= "." DIGIT+
private NUMBER_E_PART ::= ("e" | "E") ("+" | "-")? DIGIT+

private FUNCTION_CALL ::= IDENTIFIER WHITE_SPACE* "(" WHITE_SPACE* FUNCTION_CALL_PARAMETERS? WHITE_SPACE* ")"
private FUNCTION_CALL_PARAMETERS ::= FUNCTION_CALL_PARAMETER FUNCTION_CALL_PARAMETER2*
private FUNCTION_CALL_PARAMETER ::= EXPRESSION
private FUNCTION_CALL_PARAMETER2 ::= "," EXPRESSION
